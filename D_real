#include<vector>
#include<iostream>
#include<stdio.h>
#include<queue>
using namespace std;

int bfs(int start, int cur_color, vector<int> &colors, vector<vector<pair<int,int>>> &graph, int l){
  queue<int> q;
	int c = 1;
  q.push(start);
  colors[start] = cur_color;
  while(!q.empty()){
    int v = q.front();
    q.pop();
    for(int i = 0; i < graph[v].size(); i++){
      int to = graph[v][i].first;
      if(colors[to] == 0 && graph[v][i].second >= l){
        colors[to] = cur_color;
				c++;
        q.push(to);
      }
    }
  }
	return c;
}

bool f(vector<vector<pair<int,int>>> &graph, int l,int k){
  int cur_color = 0;
  vector<int> colors(graph.size(), 0);
  for(int i = 0; i < colors.size();i++){
    if(colors[i] == 0){
      if (bfs(i, ++cur_color, colors, graph, l) > k){
				return true;
			}
    }
  }
  return false;
}

int main(){
	cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(0);
  int n,m,k;
  cin >> n >> m >> k;
  vector<vector<pair<int,int>>> graph(n);
  for(int i = 0; i < m; i++){
    int a,b,c;
    cin >> a >> b >> c;
		a--;
		b--;
    graph[a].push_back({b,c});
    graph[b].push_back({a,c});
  }
  int l = 0; 
  int r = 1000000000;
  while(r - l > 1){
    int m = (l + r) / 2;
    if(f(graph,m,k)){
      l = m;
    }else{
      r = m;
    }
  }
  cout << l;



  return 0;
}